package cmd

import (
	"github.com/juju/errors"
	"github.com/spf13/cobra"
	commonoptions "github.com/tfadeyi/slosive/cmd/options/common"
	initoptions "github.com/tfadeyi/slosive/cmd/options/init"
	"github.com/tfadeyi/slosive/internal/generate"
	"github.com/tfadeyi/slosive/internal/logging"
	"github.com/tfadeyi/slosive/internal/parser"
	"github.com/tfadeyi/slosive/internal/parser/lang"
	"github.com/tfadeyi/slosive/internal/parser/options"
	"github.com/tfadeyi/slosive/internal/parser/specification/sloth"
	"io"
)

const header = `# Code generated by slotalk: https://github.com/tfadeyi/slotalk.
# DO NOT EDIT.`

func specInitCmd(common *commonoptions.Options) *cobra.Command {
	opts := initoptions.New(common)
	var inputReader io.ReadCloser
	var targetLanguage options.Option
	var targetSpecParser options.Option
	var outputKubernetes = false
	cmd := &cobra.Command{
		Use:           "init",
		Short:         "Init generates the Sloth definition specification from source code comments.",
		Long:          `The init command parses files in the target directory for comments using the @sloth tags`,
		SilenceErrors: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			logger := logging.LoggerFromContext(cmd.Context())
			logger = logger.WithName("init")

			if err := opts.Complete(); err != nil {
				logger.Error(err, "flag argument error")
				return err
			}

			switch opts.Target {
			case "sloth-k8s":
				targetSpecParser = sloth.Parser(true)
				outputKubernetes = true
			default:
				targetSpecParser = sloth.Parser(false)
			}

			switch opts.SourceLanguage {
			case lang.Rust:
				err := errors.New("The rust parser has not been fully implemented and shouldn't be used! It will have unexpected behaviours.")
				logger.Error(err, "")
				return err
				targetLanguage = options.Language(lang.Rust)
			default:
				targetLanguage = options.Language(lang.Go)
			}

			if opts.Source == "-" {
				inputReader = io.NopCloser(cmd.InOrStdin())
			}

			cmd.SetContext(logging.ContextWithLogger(cmd.Context(), logger))
			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			logger := logging.LoggerFromContext(cmd.Context())
			logger.Info("Parsing source code for slo definitions",
				"directories", opts.IncludedDirs,
				"source", opts.Source,
			)

			parser, err := parser.New(
				targetLanguage,
				targetSpecParser,
				options.Logger(&logger),
				options.SourceFile(opts.Source),
				options.SourceContent(inputReader),
				options.Include(opts.IncludedDirs...))
			if err != nil {
				logger.Error(err, "Parser initialization")
				return err
			}

			services, err := parser.Parse(cmd.Context())
			if err != nil {
				logger.Error(err, "Parser parsing error")
				return err
			}

			logger.Info("Source code was parsed")

			// check if the user has selected a target service to output
			selectedServices := services
			for index, serviceName := range opts.Services {
				// clear out the selectedServices
				if index == 0 {
					selectedServices = map[string]any{}
				}

				service, ok := services[serviceName]
				if !ok {
					err := errors.Errorf("selected service %q was not found in the parser output", serviceName)
					logger.Warn(err, "")
				} else {
					selectedServices[serviceName] = service
				}
			}

			// Only print to file if the user has selected the to-file option
			if opts.ToFile {
				logger.Info("Generating specifications files in output directory.", "directory", generate.DefaultServiceDefinitionDir)
				if err := generate.WriteSpecifications(nil, []byte(header), selectedServices, true, ".", outputKubernetes, opts.Formats...); err != nil {
					logger.Error(err, "Generating specification file error")
					return err
				}
				return nil
			}

			logger.Info("Printing result specification to stdout.")
			writer := cmd.OutOrStdout()
			if err := generate.WriteSpecifications(writer, []byte(header), selectedServices, false, "", outputKubernetes, opts.Formats...); err != nil {
				logger.Error(err, "Writing specification to stdout error")
				return err
			}
			return nil
		},
	}
	opts = opts.Prepare(cmd)
	return cmd
}
