package cmd

import (
	"io"

	"github.com/juju/errors"
	commonoptions "github.com/slosive/sloscribe/cmd/options/common"
	initoptions "github.com/slosive/sloscribe/cmd/options/init"
	"github.com/slosive/sloscribe/internal/generate"
	"github.com/slosive/sloscribe/internal/logging"
	"github.com/slosive/sloscribe/internal/parser"
	"github.com/slosive/sloscribe/internal/parser/lang"
	"github.com/slosive/sloscribe/internal/parser/options"
	"github.com/slosive/sloscribe/internal/parser/specification/sloth"
	"github.com/spf13/cobra"
)

const header = `# Code generated by SLOsive's sloscribe CLI: https://github.com/tfadeyi/slosive.
# DO NOT EDIT.`

func specInitCmd(common *commonoptions.Options) *cobra.Command {
	opts := initoptions.New(common)
	var inputReader io.ReadCloser
	var targetLanguage options.Option
	var targetSpecParser options.Option
	var outputKubernetes = false
	cmd := &cobra.Command{
		Use:           "init",
		Short:         "Init generates the Sloth definition specification from source code comments.",
		Long:          `The init command parses files in the target directory for comments using the @sloth tags`,
		SilenceErrors: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			logger := logging.LoggerFromContext(cmd.Context())
			logger = logger.WithName("init")

			if err := opts.Complete(); err != nil {
				logger.Error(err, "flag argument error")
				return err
			}

			switch opts.Target {
			case "sloth-k8s":
				targetSpecParser = sloth.Parser(true)
				outputKubernetes = true
			default:
				targetSpecParser = sloth.Parser(false)
			}

			switch opts.SourceLanguage {
			case lang.Rust:
				err := errors.New("The rust parser has not been fully implemented and shouldn't be used! It will have unexpected behaviours.")
				logger.Error(err, "")
				return err
				targetLanguage = options.Language(lang.Rust)
			default:
				targetLanguage = options.Language(lang.Go)
			}

			if opts.Source == "-" {
				inputReader = io.NopCloser(cmd.InOrStdin())
			}

			cmd.SetContext(logging.ContextWithLogger(cmd.Context(), logger))
			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			logger := logging.LoggerFromContext(cmd.Context())
			logger.Info("Parsing source code for SLO definitions ‚öôÔ∏è",
				"directories", opts.IncludedDirs,
				"source", opts.Source,
			)

			parser, err := parser.New(
				targetLanguage,
				targetSpecParser,
				options.Logger(&logger),
				options.SourceFile(opts.Source),
				options.SourceContent(inputReader),
				options.Include(opts.IncludedDirs...))
			if err != nil {
				logger.Error(err, "Parser initialization error, please try again")
				return err
			}

			services, err := parser.Parse(cmd.Context())
			if err != nil {
				logger.Error(err, "Parsing error, please try again")
				return err
			}

			logger.Info("Source code was parsed ‚úÖ")

			// check if the user has selected a target service to output
			selectedServices := services
			for index, serviceName := range opts.Services {
				// clear out the selectedServices
				if index == 0 {
					selectedServices = map[string]any{}
				}

				service, ok := services[serviceName]
				if !ok {
					logger.Warn(errors.Errorf("selected service specification %q was not found in the parser output", serviceName), "")
				} else {
					selectedServices[serviceName] = service
				}
			}

			// Only print to file if the user has selected the to-file option
			if opts.ToFile {
				logger.Info("Generating service specification(s) files in output directory", "directory", generate.DefaultServiceDefinitionDir)
				if outputKubernetes {
					err = generate.WriteK8Specifications(nil, []byte(header), selectedServices, true, ".", opts.Formats...)
				} else {
					err = generate.WriteSpecifications(nil, []byte(header), selectedServices, true, ".", opts.Formats...)
				}
				if err != nil {
					logger.Error(err, "Error generating specification file for the parsed service, please try again")
					return err
				}
				return nil
			}

			logger.Info("Printing parsed service specification(s) ‚úçüèø")
			writer := cmd.OutOrStdout()

			// Print the specification(s) to stout or file
			if outputKubernetes {
				err = generate.WriteK8Specifications(writer, []byte(header), selectedServices, false, "", opts.Formats...)
			} else {
				err = generate.WriteSpecifications(writer, []byte(header), selectedServices, false, "", opts.Formats...)
			}
			if err != nil {
				logger.Error(err, "Error printing service specification(s) to standard output")
				return err
			}

			return nil
		},
	}
	opts = opts.Prepare(cmd)
	return cmd
}
